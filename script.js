const apiUrl = 'http://localhost:3001/dailyRecords';

const form = document.getElementById('daily-form');
const historyContainer = document.getElementById('record-history');
const summaryContainer = document.getElementById('activity-summary');

let editId = null;

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const record = {
    date: document.getElementById('date').value,
    waterIntake: parseInt(document.getElementById('waterIntake').value),
    sleepHours: parseFloat(document.getElementById('sleepHours').value),
    exercise: document.getElementById('exercise').value,
    stressLevel: document.getElementById('stressLevel').value
  };

  if (editId) {
    await fetch(`${apiUrl}/${editId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(record)
    });
    editId = null;
  } else {
    await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(record)
    });
  }

  form.reset();
  loadRecords();
});

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
async function loadRecords() {
  const res = await fetch(apiUrl);
  const data = await res.json();

  historyContainer.innerHTML = '';
  data.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(rec => {
    const el = document.createElement('div');
    el.className = 'record-item';
    el.innerHTML = `
      <strong>${rec.date}</strong><br>
      ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥: ${rec.waterIntake ?? '-'} ml<br>
      ‡∏ô‡∏≠‡∏ô: ${rec.sleepHours ?? '-'} ‡∏ä‡∏°.<br>
      ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢: ${rec.exercise || '-'}<br>
      ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î: ${rec.stressLevel || '-'}<br>
      <button onclick="editRecord(${rec.id})">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
      <button onclick="deleteRecord(${rec.id})">‡∏•‡∏ö</button>
      <hr>
    `;
    historyContainer.appendChild(el);
  });
}

   function displayRecords() {
            const historyDiv = document.getElementById('record-history');
            
            if (healthRecords.length === 0) {
                historyDiv.innerHTML = '<div style="text-align: center; color: #999; font-style: italic; padding: 40px;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>';
                return;
            }

            historyDiv.innerHTML = healthRecords.map(record => `
                <div class="record-item">
                    <div class="record-date">${formatDate(record.date)}</div>
                    <div class="record-details">
                        <div class="detail-item">
                            <div class="detail-icon water-icon">üíß</div>
                            <span>‡∏ô‡πâ‡∏≥: ${record.waterIntake || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ml</span>
                        </div>
                        <div class="detail-item">
                            <div class="detail-icon sleep-icon">üò¥</div>
                            <span>‡∏ô‡∏≠‡∏ô: ${record.sleepHours || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ä‡∏°.</span>
                        </div>
                        <div class="detail-item">
                            <div class="detail-icon exercise-icon">üèÉ‚Äç‚ôÇÔ∏è</div>
                            <span>‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢: ${record.exercise || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                        </div>
                        <div class="detail-item">
                            <div class="detail-icon stress-icon">üò∞</div>
                            <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î: ${getStressEmoji(record.stressLevel)} ${record.stressLevel}</span>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const thaiDate = date.toLocaleDateString('th-TH', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long'
            });
            return thaiDate;
        }

        function getStressEmoji(level) {
            switch(level) {
                case '‡∏ï‡πà‡∏≥': return 'üòå';
                case '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': return 'üòê';
                case '‡∏™‡∏π‡∏á': return 'üò∞';
                default: return 'üòê';
            }
        }

        function generateSummary(period) {
            const summaryDiv = document.getElementById('activity-summary');
            const buttons = document.querySelectorAll('.summary-section button');
            
            // Show loading state
            buttons.forEach(btn => btn.disabled = true);
            summaryDiv.innerHTML = '<div class="loading" style="margin: 40px auto;"></div><div style="margin-top: 20px;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ...</div>';

            setTimeout(() => {
                if (healthRecords.length === 0) {
                    summaryDiv.innerHTML = '<div style="color: #999; font-style: italic;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô</div>';
                    buttons.forEach(btn => btn.disabled = false);
                    return;
                }

                const now = new Date();
                const periodDays = period === 'week' ? 7 : 30;
                const startDate = new Date(now.getTime() - (periodDays * 24 * 60 * 60 * 1000));

                const periodRecords = healthRecords.filter(record => {
                    const recordDate = new Date(record.date);
                    return recordDate >= startDate && recordDate <= now;
                });

                if (periodRecords.length === 0) {
                    summaryDiv.innerHTML = `<div style="color: #999; font-style: italic;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô${period === 'week' ? '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</div>`;
                    buttons.forEach(btn => btn.disabled = false);
                    return;
                }

                // Calculate averages
                const totalWater = periodRecords.reduce((sum, record) => sum + (parseInt(record.waterIntake) || 0), 0);
                const totalSleep = periodRecords.reduce((sum, record) => sum + (parseFloat(record.sleepHours) || 0), 0);
                const avgWater = Math.round(totalWater / periodRecords.length);
                const avgSleep = (totalSleep / periodRecords.length).toFixed(1);

                // Count stress levels
                const stressCount = { '‡∏ï‡πà‡∏≥': 0, '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': 0, '‡∏™‡∏π‡∏á': 0 };
                periodRecords.forEach(record => {
                    if (record.stressLevel) stressCount[record.stressLevel]++;
                });

                // Count exercise days
                const exerciseDays = periodRecords.filter(record => record.exercise && record.exercise.trim()).length;

                               summaryDiv.innerHTML = `
                    <div class="summary-content">
                        <h3 style="color: #667eea; margin-bottom: 20px; text-align: center;">
                            üìä ‡∏™‡∏£‡∏∏‡∏õ${period === 'week' ? '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ (${periodRecords.length} ‡∏ß‡∏±‡∏ô)
                        </h3>
                        <div class="summary-stat">
                            <span class="stat-label">üíß ‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</span>
                            <span class="stat-value">${avgWater} ml/‡∏ß‡∏±‡∏ô</span>
                        </div>
                        <div class="summary-stat">
                            <span class="stat-label">üò¥ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</span>
                            <span class="stat-value">${avgSleep} ‡∏ä‡∏°./‡∏ß‡∏±‡∏ô</span>
                        </div>
                        <div class="summary-stat">
                            <span class="stat-label">üèÉ‚Äç‚ôÇÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</span>
                            <span class="stat-value">${exerciseDays} ‡∏ß‡∏±‡∏ô</span>
                        </div>
                        <div class="summary-stat">
                            <span class="stat-label">üòå ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î (‡∏ï‡πà‡∏≥)</span>
                            <span class="stat-value">${stressCount['‡∏ï‡πà‡∏≥']} ‡∏ß‡∏±‡∏ô</span>
                        </div>
                        <div class="summary-stat">
                            <span class="stat-label">üòê ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î (‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)</span>
                            <span class="stat-value">${stressCount['‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á']} ‡∏ß‡∏±‡∏ô</span>
                        </div>
                        <div class="summary-stat">
                            <span class="stat-label">üò∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î (‡∏™‡∏π‡∏á)</span>
                            <span class="stat-value">${stressCount['‡∏™‡∏π‡∏á']} ‡∏ß‡∏±‡∏ô</span>
                        </div>
                    </div>
                `;
                // Re-enable buttons
                buttons.forEach(btn => btn.disabled = false);
            }, 1000);
            
        }
      
// ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
loadRecords();
